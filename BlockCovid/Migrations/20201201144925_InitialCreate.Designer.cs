// <auto-generated />
using System;
using BlockCovid.Dal;
using BlockCovid.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlockCovid.Migrations
{
    [DbContext(typeof(BlockCovidContext))]
    [Migration("20201201144925_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BlockCovid.Models.Citizen", b =>
                {
                    b.Property<long>("CitizenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Positive")
                        .HasColumnType("bit");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenID");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("BlockCovid.Models.CitizenQrCode", b =>
                {
                    b.Property<long>("CitizenQrCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CitizenId")
                        .HasColumnType("bigint");

                    b.Property<long>("QrCodeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CitizenQrCodeId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("QrCodeId");

                    b.ToTable("CitizenQrCode");
                });

            modelBuilder.Entity("BlockCovid.Models.Participant", b =>
                {
                    b.Property<long>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participant_Type")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantID");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("BlockCovid.Models.QrCode", b =>
                {
                    b.Property<long>("QrCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Descritpion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ParticipantID")
                        .HasColumnType("bigint");

                    b.HasKey("QrCodeID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("QrCode");
                });

            modelBuilder.Entity("BlockCovid.Models.CitizenQrCode", b =>
                {
                    b.HasOne("BlockCovid.Models.Citizen", "Citizen")
                        .WithMany("Citizen_QrCode")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockCovid.Models.QrCode", "QrCode")
                        .WithMany("Citizen_Qr_Code")
                        .HasForeignKey("QrCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");

                    b.Navigation("QrCode");
                });

            modelBuilder.Entity("BlockCovid.Models.QrCode", b =>
                {
                    b.HasOne("BlockCovid.Models.Participant", "Participant")
                        .WithMany("QrCode")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("BlockCovid.Models.Citizen", b =>
                {
                    b.Navigation("Citizen_QrCode");
                });

            modelBuilder.Entity("BlockCovid.Models.Participant", b =>
                {
                    b.Navigation("QrCode");
                });

            modelBuilder.Entity("BlockCovid.Models.QrCode", b =>
                {
                    b.Navigation("Citizen_Qr_Code");
                });
#pragma warning restore 612, 618
        }
    }
}
